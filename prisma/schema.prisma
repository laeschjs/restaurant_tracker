datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]

  friends FriendMapper[] @relation("FriendPointer")
  selves  FriendMapper[] @relation("SelfPointer")
  meals   Meal[]

  height          Int?
  themeParkVisits ThemeParkVisit[]

  seventyFiveHardChallenges SeventyFiveHardChallenge[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Restaurant {
  id   String @id @default(cuid())
  name String @unique

  cuisines RestaurantCuisineMapper[]
  meals    Meal[]
}

model Cuisine {
  id   String @id @default(cuid())
  name String @unique

  restaurants RestaurantCuisineMapper[]
}

model RestaurantCuisineMapper {
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String

  cuisine   Cuisine @relation(fields: [cuisineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cuisineId String

  @@id([restaurantId, cuisineId])
}

model FriendMapper {
  id String @id @default(cuid())

  friend   User   @relation("FriendPointer", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friendId String

  self   User   @relation("SelfPointer", fields: [selfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  selfId String
}

model Meal {
  id String @id @default(cuid())

  eatenAt     DateTime @default(now())
  queueTime   Int      @default(0)
  reservation Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String

  extras MealExtra[]
}

model MealExtra {
  id String @id @default(cuid())

  type   String
  name   String
  notes  String?
  rating Int
  cost   Float

  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealId String
}

model ThemePark {
  id   String @id @default(cuid())
  name String @unique

  activities      Activity[]
  themeParkVisits ThemeParkVisit[]
}

model ThemeParkVisit {
  id             String    @id @default(cuid())
  dayTicketPrice Float?
  start          DateTime  @default(now())
  end            DateTime?

  users User[]

  themePark   ThemePark @relation(fields: [themeParkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  themeParkId String

  activityActions ActivityAction[]
  rainPeriods     RainPeriod[]
}

model RainPeriod {
  id String @id @default(cuid())

  start DateTime
  end   DateTime

  themeParkVisitId String
  themeParkVisit   ThemeParkVisit @relation(fields: [themeParkVisitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Popularity {
  id        String @id @default(cuid())
  type      String
  lowRange  Int
  midRange  Int
  highRange Int

  activities Activity[]
}

model Activity {
  id   String @id @default(cuid())
  name String @unique
  type String

  themeParkId String
  themePark   ThemePark @relation(fields: [themeParkId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  popularityId String
  popularity   Popularity @relation(fields: [popularityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  actions ActivityAction[]
}

model ActivityAction {
  id          String @id @default(cuid())
  claimedWait Int?
  actualWait  Int?

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activityId String

  themeParkVisit   ThemeParkVisit @relation(fields: [themeParkVisitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  themeParkVisitId String
}

model SeventyFiveHardChallenge {
  id String @id @default(cuid())

  startDate DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  dailyEntries SeventyFiveHardDailyEntry[]
}

model SeventyFiveHardDailyEntry {
  id String @id @default(cuid())

  challenge   SeventyFiveHardChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  challengeId String

  date DateTime

  weight         Float?
  drankWater     Boolean
  indoorWorkout  Boolean
  outdoorWorkout Boolean
  readTenPages   Boolean
  followedDiet   Boolean
  imageTaken     Boolean
}
