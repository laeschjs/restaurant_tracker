datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]

  friends FriendMapper[] @relation("FriendPointer")
  selves  FriendMapper[] @relation("SelfPointer")
  meals   Meal[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Restaurant {
  id    String @id @default(cuid())
  name  String @unique

  cuisines RestaurantCuisineMapper[]
  meals   Meal[]
}

model Cuisine {
  id    String @id @default(cuid())
  name  String @unique

  restaurants RestaurantCuisineMapper[]
}

model RestaurantCuisineMapper {
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String

  cuisine   Cuisine @relation(fields: [cuisineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cuisineId String
  
  @@id([restaurantId, cuisineId])
}

model FriendMapper {
  id String @id @default(cuid())

  friend   User   @relation("FriendPointer", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friendId String

  self   User   @relation("SelfPointer", fields: [selfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  selfId String
}

model Meal {
  id String @id @default(cuid())
  
  eatenAt     DateTime @default(now())
  notes       String?
  dish        String
  rating      Int
  queueTime   Int      @default(0)
  reservation Boolean  @default(false)
  cost        Float

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String
}
